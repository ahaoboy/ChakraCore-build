name: build

permissions:
  contents: write

on:
  push:
  pull_request:

defaults:
  run:
    shell: bash --noprofile --norc -CeEuo pipefail {0}

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-apple-darwin
            os: macos-13
          # TODO: https://github.com/chakra-core/ChakraCore/issues/6860
          # - target: aarch64-apple-darwin
          #   os: macos-14
          - target: x86_64-pc-windows-gnu
            os: windows-latest
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-24.04

    runs-on: ${{ matrix.os }}
    name: build-${{ matrix.target }}
    steps:

      - uses: actions/checkout@v4
      # - uses: msys2/setup-msys2@v2
      #   if: matrix.os == 'windows-latest'
      #   with:
      #     msystem: MINGW64
      #     update: true
      #     path-type: inherit
      #     install: >-
      #       mingw-w64-x86_64-make
      #       mingw-w64-x86_64-cmake
      #       mingw-w64-x86_64-gcc
      #       mingw-w64-x86_64-clang
      #       mingw-w64-x86_64-perl
      #       mingw-w64-x86_64-python3
      #       zip
      #       unzip
      #       curl
      #       wget
      - name: install-${{ matrix.target }}
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          sudo apt-get install -y git build-essential clang libicu-dev libidn-dev
          ls -lh /usr/lib/x86_64-linux-gnu/libidn*
          sudo ln -s /usr/lib/x86_64-linux-gnu/libidn.so.12 /usr/lib/x86_64-linux-gnu/libidn.so.11

      - name: install-${{ matrix.target }}
        if: startsWith(matrix.os, 'macos')
        run: |
          brew install cmake icu4c

      # - name: install-${{ matrix.target }}
      #   if: startsWith(matrix.os, 'ubuntu')
      #   run: |
      #     sudo apt-get install -y git build-essential cmake clang libicu-dev

      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: '3.2.x'

      - name: build-${{ matrix.target }}
        if: matrix.os != 'windows-latest'
        run: |
          cmake --version
          bash build.sh ${{ matrix.target }}

      - name: build-${{ matrix.target }}
        if: matrix.os == 'windows-latest'
        run: |
          curl -L -o chakracore.zip https://globalcdn.nuget.org/packages/microsoft.chakracore.vc140.1.11.24.nupkg?packageVersion=1.11.24
          unzip chakracore.zip -d ch

          cp -r ./ch/lib/native/v140/x64/release ./dist
          tar -czf ./ch-${{ matrix.target }}.tar.gz -C dist .

      # - name: build-windows
      #   if: matrix.os == 'windows-latest'
      #   shell: msys2 {0}
      #   run: |
      #     bash build.sh ${{ matrix.target }}

      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: ch-${{ matrix.target }}
          path: ./ch-${{ matrix.target }}.tar.gz
  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ch
          pattern: ch*
          merge-multiple: true

      - name: release
        if: startsWith(github.ref, 'refs/tags/')
        uses: ncipollo/release-action@v1
        with:
          artifacts: "ch/*.tar.gz"
  post-test:
    needs: ["build"]
    strategy:
      matrix:
        os: [
            ubuntu-24.04,
            # windows-latest,
            # macos-14,
            macos-13,
          ]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: wait
        run: |
          sleep 120
      - uses: easy-install/easy-setup@v1
        with:
          url: https://github.com/ahaoboy/ChakraCore-build
      - name: test
        run: |
          which ch
          echo "console.log(1+1)" >> ./test.js
          ch ./test.js
